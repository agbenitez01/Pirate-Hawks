
package com.piratehawks.SearchEngine;

/*
 * License Info?
 */
import javax.xml.*;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import javax.xml.transform.dom.*;
import org.w3c.dom.*;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.Desktop;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException; 
import java.util.Date;
import java.io.FileOutputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.xml.transform.OutputKeys;
import org.xml.sax.SAXException;

/**
 * A stubbed out maintenance GUI for Admin.
 */
public class Maintenance extends javax.swing.JFrame {

    /**
     * Creates new form Maintenance
     */
    public static final String filesInXML = "C:\\Test\\test.xml";
    private final JFileChooser openFileChooser;
    private BufferedImage originalBI;
    
    
    public Maintenance() {
        initComponents();
        
        openFileChooser= new JFileChooser();
        openFileChooser.setCurrentDirectory(new File("c:\\temp"));
        openFileChooser.setFileFilter(new FileNameExtensionFilter("Example","txt"));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: The content of this method was regenerated by the Form Editor.
     * Modification from code may cause problems.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        lblMaintenanceTitle = new javax.swing.JLabel();
        btnViewFiles = new javax.swing.JButton();
        lblViewFiles = new javax.swing.JLabel();
        lblAddFiles = new javax.swing.JLabel();
        btnAddFiles = new javax.swing.JButton();
        lblRemoveFiles = new javax.swing.JLabel();
        btnRemoveFiles = new javax.swing.JButton();
        lblUpdateFiles = new javax.swing.JLabel();
        btnUpdateFiles = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        menuHelp = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblMaintenanceTitle.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblMaintenanceTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblMaintenanceTitle.setText("Maintenance");

        btnViewFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnViewFiles.setText("View");
        btnViewFiles.setToolTipText("View searchable files");
        btnViewFiles.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewFilesActionPerformed(evt);
            }
        });

        lblViewFiles.setBackground(new java.awt.Color(204, 204, 204));
        lblViewFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblViewFiles.setText("View Indexed Files:");

        lblAddFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblAddFiles.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAddFiles.setText("Add Files:");
        

        btnAddFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnAddFiles.setText("Add");
        btnAddFiles.setToolTipText("Add more files to search");
        btnAddFiles.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btnAddFilesActionPerformed(evt);
                } catch (IOException ex) {
                    Logger.getLogger(Maintenance.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });

        lblRemoveFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblRemoveFiles.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblRemoveFiles.setText("Remove Files:");

        btnRemoveFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnRemoveFiles.setText("Remove");
        btnRemoveFiles.setToolTipText("Remove searchable files");
        btnRemoveFiles.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveFilesActionPerformed(evt);
            }
        });

        lblUpdateFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblUpdateFiles.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblUpdateFiles.setText("Update Existing Files:");

        btnUpdateFiles.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnUpdateFiles.setText("Update");
        btnUpdateFiles.setToolTipText("Update existing files");
        btnUpdateFiles.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateFilesActionPerformed(evt);
            }
        });
        

        menuFile.setText("File");
        jMenuBar1.add(menuFile);

        menuHelp.setText("Help");
        jMenuBar1.add(menuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblViewFiles, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblAddFiles, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRemoveFiles, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUpdateFiles, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(btnViewFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnAddFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnRemoveFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdateFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(87, 87, 87))
            .addGroup(layout.createSequentialGroup()
                .addGap(139, 139, 139)
                .addComponent(lblMaintenanceTitle)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(lblMaintenanceTitle)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewFiles)
                    .addComponent(lblViewFiles, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btnAddFiles)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(lblAddFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveFiles)
                    .addComponent(lblRemoveFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUpdateFiles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdateFiles))
                .addGap(111, 111, 111))
        );

        pack(); 
    }// </editor-fold>                        

    private JLabel messageLabel;
    private JLabel openFileButton;
    
    private void btnViewFilesActionPerformed(ActionEvent evt) {                                             
        // TODO add your handling code here:
                //button does a tries to open the file chooser and catches
        //the error by telling the user the file wasnt choosen
        // TODO add your handling code here:
        int returnValue= openFileChooser.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION){
            try{
                originalBI= ImageIO.read(openFileChooser.getSelectedFile());
            }catch(IOException ioe){
                messageLabel.setText("No file choosen");
            }
        }
        else
        {
            messageLabel.setText("No file choosen");
        }
    }    
       

        private void btnAddFilesActionPerformed(ActionEvent evt) throws IOException {                                             
        // TODO add your handling code here:
                //button does a tries to open the file chooser and catches
        //the error by telling the user the file wasnt choosen
        // TODO add your handling code here:
       // int returnValue= openFileChooser.showOpenDialog(this);
        //if(returnValue == JFileChooser.APPROVE_OPTION){
        final JFileChooser fc = new JFileChooser();  
        int returnValue = fc.showOpenDialog(fc);
        String filesInXML = "C:\\Test\\test.xml";
         String[] data = {"file", "fileID", "fileName", "filePath", "dateAdded",
         "dateModified", "dateRemoved"};
        
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File fileChosen = fc.getSelectedFile();
            String chosenFileName = fileChosen.getName();
            String chosenFilePath = fileChosen.getAbsolutePath();
            Date date_Added = new Date();
            
            try {
            DocumentBuilderFactory documentFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder documentBuilder = documentFactory.newDocumentBuilder();
            Document document = documentBuilder.newDocument();
            
            // root element
            Element root = document.createElement("indexedFile");
            document.appendChild(root);
 
            // file element
            Element file = document.createElement("file");
 
            root.appendChild(file);
 
            // set an attribute to file element
            Attr attr = document.createAttribute("id");
            attr.setValue("0");
            file.setAttributeNode(attr);
 
            //you can also use staff.setAttribute("id", "1") for this
            // fileName element
            Element fileName = document.createElement("fileName");
            fileName.appendChild(document.createTextNode(chosenFileName));
            file.appendChild(fileName);
 
            // filePath element
            Element filePath = document.createElement("filePath");
            filePath.appendChild(document.createTextNode(chosenFilePath));
            file.appendChild(filePath);
 
            // dateAdded element
            Element dateAdded = document.createElement("dateAdded");
            dateAdded.appendChild(document.createTextNode(date_Added.toString()));
            file.appendChild(dateAdded);
 
            // department dateModified
            Element dateModified = document.createElement("dateModified");
            dateModified.appendChild(document.createTextNode(""));
            file.appendChild(dateModified);
            
            // department dateModified
            Element dateRemoved = document.createElement("dateRemoved");
            dateRemoved.appendChild(document.createTextNode(""));
            file.appendChild(dateRemoved);
 
            // create the xml file
            //transform the DOM Object to an XML File
            TransformerFactory transformerFactory = TransformerFactory.newInstance();
            Transformer transformer = transformerFactory.newTransformer();
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");
            File xmlFile = new File("C:\\Test\\test1.xml");
            StreamResult streamResult = new StreamResult(xmlFile);
            Node node = document.getDocumentElement();
            DOMSource domSource = new DOMSource(document);
            transformer.transform(domSource, streamResult);
            
            document = documentBuilder.parse(filesInXML);
            root = document.getDocumentElement();
            for(int i=0;i<2;i++) {
                Element element = document.createElement("file");
                for(int j=0;j<data.length;j++) {
                Element elementInside = document.createElement(data[j]);
                Text text = document.createTextNode(data[j]);
                elementInside.appendChild(text);
                element.appendChild(elementInside);
                root.appendChild(element);
                }
            }

            transformer.transform(domSource, streamResult);

        } catch (ParserConfigurationException pce) {
            pce.printStackTrace();
        } 
        catch (TransformerException tfe) {
            tfe.printStackTrace();
        }   catch (SAXException ex) {
                Logger.getLogger(Maintenance.class.getName()).log(Level.SEVERE, null, ex);
            }
    }
}   
        private void btnRemoveFilesActionPerformed(ActionEvent evt) {                                             
        // TODO add your handling code here:
                //button does a tries to open the file chooser and catches
        //the error by telling the user the file wasnt choosen
        // TODO add your handling code here:
        int returnValue= openFileChooser.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION){
            try{
                originalBI= ImageIO.read(openFileChooser.getSelectedFile());
            }catch(IOException ioe){
                messageLabel.setText("No file choosen");
            }
        }
        else
        {
            messageLabel.setText("No file choosen");
        }
        
    }   

    private void btnUpdateFilesActionPerformed(ActionEvent evt) {                                             
        // TODO add your handling code here:
                //button does a tries to open the file chooser and catches
        //the error by telling the user the file wasnt choosen
        // TODO add your handling code here:
        int returnValue= openFileChooser.showOpenDialog(this);
        if(returnValue == JFileChooser.APPROVE_OPTION){
            try{
                originalBI= ImageIO.read(openFileChooser.getSelectedFile());
            }catch(IOException ioe){
                messageLabel.setText("No file choosen");
            }
        }
        else
        {
            messageLabel.setText("No file choosen");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Maintenance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Maintenance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Maintenance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Maintenance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Maintenance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify                     
    private javax.swing.JButton btnAddFiles;
    private javax.swing.JButton btnRemoveFiles;
    private javax.swing.JButton btnUpdateFiles;
    private javax.swing.JButton btnViewFiles;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel lblAddFiles;
    private javax.swing.JLabel lblMaintenanceTitle;
    private javax.swing.JLabel lblRemoveFiles;
    private javax.swing.JLabel lblUpdateFiles;
    private javax.swing.JLabel lblViewFiles;
    private javax.swing.JMenu menuFile;
    private javax.swing.JMenu menuHelp;
    // End of variables declaration                   
}

